name: Security & Compliance Scan (GoLang)

on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - '*'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read # Permissão mínima para ler o código do repositório
      security-events: write # Permissão para upload de resultados SARIF para GitHub Security tab

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necessário para Gitleaks escanear todo o histórico

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24' # Use a versão do Go que você está usando no seu projeto

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run GoSec (SAST for Go)
        uses: securego/gosec@master
        with:
          args: './...' # Escaneia todos os pacotes Go no repositório
          # Formato SARIF para integração com GitHub Security tab
          # Pode adicionar outros formatos como html, json, etc.
          output: gosec-results.sarif
        continue-on-error: true # Permite que o workflow continue mesmo com falhas de segurança leves
        env:
          GOS_SARIF_OUTPUT: gosec-results.sarif # Gosec escreve o SARIF aqui

      - name: Upload GoSec SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec-results.sarif
        if: always() # Uploada resultados mesmo que a etapa anterior tenha tido erros

      - name: Run Govulncheck (Vulnerability detection for Go modules)
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./... -json > govulncheck-results.json
        continue-on-error: true # Continua para as outras ferramentas mesmo com vulnerabilidades
        # Nota: govulncheck não tem output SARIF nativo. Você precisaria de um conversor
        # ou postar os resultados em outro sistema.

      - name: Run Staticcheck (Go static analysis)
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./... > staticcheck-results.txt
        continue-on-error: true # Continua mesmo com erros de estilo/performance

      - name: Run Gitleaks (Secret Scanning)
        uses: zricethezav/gitleaks-action@v2
        with:
          # Para um histórico completo, fetch-depth deve ser 0 no checkout
          # Caso queira um relatório SARIF para o GitHub Security tab
          report_format: sarif
          output: gitleaks-results.sarif
        continue-on-error: true # Não queremos falhar o workflow por segredos detectados