name: Publish Docker Image to Google Cloud Registry
run-name: publish-image

on:
  push:
    branches:
      - "main"
      - "develop"

env:
  # Base names for services and secrets - User needs to set these in GitHub Secrets
  GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  GAR_LOCATION: ${{ vars.GAR_LOCATION }} 
  CLOUD_RUN_REGION: ${{ vars.CLOUD_RUN_REGION }}
  GCP_REPOSITORY: ${{ vars.GCP_REPOSITORY }}
  GCP_SERVICE_NAME: ${{ vars.GCP_SERVICE_IMAGE }}
  
jobs:
  deploy-production:
    # Este job será executado APENAS se a branch for 'main'
    if: github.ref == 'refs/heads/main'
    name: Build TSHOT
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: read
      id-token: write

    env: 
      IMAGE_TAG_SUFFIX: ''
      IMAGE_LAST_PATH: ''
      IMAGE_TAG_PATH: ''
      SERVICE_NAME: ''
      ENVIRONMENT_NAME: ''
      ACTUAL_SECRET_VALUE: '' 

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine Environment and Set Variables
        run: |
          echo "${{ vars.GAR_LOCATION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.GCP_REPOSITORY }}/${{ vars.GCP_SERVICE_NAME }}:${{ github.sha }}"
          echo "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_REPOSITORY }}/${{ env.GCP_SERVICE_NAME }}:${{ github.sha }}"
          echo "IMAGE_TAG_PATH=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_REPOSITORY }}/${{ env.GCP_SERVICE_NAME }}/${{ env.GCP_SERVICE_NAME }}:${{ github.sha }}" >> $GITHUB_ENV
          echo "IMAGE_LAST_PATH=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_REPOSITORY }}/${{ env.GCP_SERVICE_NAME }}/${{ env.GCP_SERVICE_NAME }}:latest" >> $GITHUB_ENV
          echo "SERVICE_NAME=${{ env.GCP_SERVICE_NAME }}-prd" >> $GITHUB_ENV

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up GCloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v3'
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}

      - name: Build Docker image
        env:
          IMAGE_NAME: ${{ env.IMAGE_TAG_PATH }}
        run: |
          echo "Building Docker image: $IMAGE_NAME"
          docker build -t $IMAGE_NAME -f Dockerfile .

      - name: Push Docker image to Artifact Registry
        env:
          IMAGE_NAME: ${{ env.IMAGE_TAG_PATH }}
        run: |
          echo "Pushing Docker image: $IMAGE_NAME"
          docker push $IMAGE_NAME

      - name: Create or Update Config Secret in Secret Manager
        run: |
          echo "Checking for secret: ${{ env.SERVICE_NAME }} in project ${{ env.GCP_PROJECT_ID }}"
          if ! gcloud secrets describe ${{ env.SERVICE_NAME }} --project="${{ env.GCP_PROJECT_ID }}" --quiet &> /dev/null; then
            echo "Secret ${{ env.SERVICE_NAME }} does not exist. Creating..."
            gcloud secrets create ${{ env.SERVICE_NAME }} \
              --replication-policy="automatic" \
              --project="${{ env.GCP_PROJECT_ID }}" --quiet
          else
            echo "Secret ${{ env.SERVICE_NAME }} already exists."
          fi
          
          echo "Updating secret version for ${{ env.SERVICE_NAME }}"
          echo -n "${{ secrets.CONFIG_YAML }}" | gcloud secrets versions add ${{ env.SERVICE_NAME }} \
            --data-file=- \
            --project="${{ env.GCP_PROJECT_ID }}" --quiet
          echo "Latest version of secret ${{ env.SERVICE_NAME }} updated."

      - name: Deploy to Cloud Run
        env:
          IMAGE_NAME: ${{ env.IMAGE_TAG_PATH }}
        run: |
          echo "Deploying image $IMAGE_NAME to Cloud Run service ${{ env.SERVICE_NAME }}"
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.IMAGE_NAME }} \
            --region ${{ env.CLOUD_RUN_REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port "8080" \
            --update-secrets=/configs/config.yaml=projects/671107607354/secrets/${{ env.SERVICE_NAME }}:latest \
            --update-secrets=/app/auth.json=projects/671107607354/secrets/gcp-auth:latest \
            --set-env-vars PATH_CONFIG=/configs \
            --project ${{ env.GCP_PROJECT_ID }} \
            --quiet
          echo " --set-env-vars PATH_CONFIG=/app \
            --add-volume name=config,type=secret,secret=${{ env.SERVICE_NAME }} \
            --add-volume-mount volume=config,mount-path=/app/config.yaml \
            --set-secrets /app/config.yaml=${{ env.SERVICE_NAME }}:latest \ "
          echo "Deployment to ${{ env.SERVICE_NAME }} completed."

  deploy-develop:
    # Este job será executado APENAS se a branch for 'main'
    if: github.ref == 'refs/heads/develop'
    name: Build TSHOT
    runs-on: ubuntu-latest
    environment: develop

    permissions:
      contents: read
      id-token: write

    env: 
      IMAGE_TAG_SUFFIX: ''
      IMAGE_LAST_PATH: ''
      IMAGE_TAG_PATH: ''
      SERVICE_NAME: ''
      ENVIRONMENT_NAME: ''
      ACTUAL_SECRET_VALUE: '' 

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine Environment and Set Variables
        run: |
          echo "${{ vars.GAR_LOCATION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.GCP_REPOSITORY }}/${{ vars.GCP_SERVICE_NAME }}:${{ github.sha }}"
          echo "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_REPOSITORY }}/${{ env.GCP_SERVICE_NAME }}:${{ github.sha }}"
          echo "IMAGE_TAG_PATH=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_REPOSITORY }}/${{ env.GCP_SERVICE_NAME }}/${{ env.GCP_SERVICE_NAME }}:${{ github.sha }}" >> $GITHUB_ENV
          echo "IMAGE_LAST_PATH=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_REPOSITORY }}/${{ env.GCP_SERVICE_NAME }}/${{ env.GCP_SERVICE_NAME }}:latest" >> $GITHUB_ENV
          echo "SERVICE_NAME=${{ env.GCP_SERVICE_NAME }}-dev" >> $GITHUB_ENV

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up GCloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v3'
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}

      - name: Build Docker image
        env:
          IMAGE_NAME: ${{ env.IMAGE_TAG_PATH }}
        run: |
          echo "Building Docker image: $IMAGE_NAME"
          docker build -t $IMAGE_NAME -f Dockerfile .

      - name: Push Docker image to Artifact Registry
        env:
          IMAGE_NAME: ${{ env.IMAGE_TAG_PATH }}
        run: |
          echo "Pushing Docker image: $IMAGE_NAME"
          docker push $IMAGE_NAME

      - name: Create or Update Config Secret in Secret Manager
        run: |
          echo "Checking for secret: ${{ env.SERVICE_NAME }} in project ${{ env.GCP_PROJECT_ID }}"
          if ! gcloud secrets describe ${{ env.SERVICE_NAME }} --project="${{ env.GCP_PROJECT_ID }}" --quiet &> /dev/null; then
            echo "Secret ${{ env.SERVICE_NAME }} does not exist. Creating..."
            gcloud secrets create ${{ env.SERVICE_NAME }} \
              --replication-policy="automatic" \
              --project="${{ env.GCP_PROJECT_ID }}" --quiet
          else
            echo "Secret ${{ env.SERVICE_NAME }} already exists."
          fi
          
          echo "Updating secret version for ${{ env.SERVICE_NAME }}"
          echo -n "${{ secrets.CONFIG_YAML }}" | gcloud secrets versions add ${{ env.SERVICE_NAME }} \
            --data-file=- \
            --project="${{ env.GCP_PROJECT_ID }}" --quiet
          echo "Latest version of secret ${{ env.SERVICE_NAME }} updated."

      - name: Deploy to Cloud Run
        env:
          IMAGE_NAME: ${{ env.IMAGE_TAG_PATH }}
        run: |
          echo "Deploying image $IMAGE_NAME to Cloud Run service ${{ env.SERVICE_NAME }}"
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.IMAGE_NAME }} \
            --region ${{ env.CLOUD_RUN_REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port "8080" \
            --update-secrets=/configs/config.yaml=projects/671107607354/secrets/${{ env.SERVICE_NAME }}:latest \
            --update-secrets=/app/auth.json=projects/671107607354/secrets/gcp-auth:latest \
            --set-env-vars PATH_CONFIG=/configs \
            --project ${{ env.GCP_PROJECT_ID }} \
            --quiet
            
          echo " --set-env-vars PATH_CONFIG=/app \
            --add-volume name=config,type=secret,secret=${{ env.SERVICE_NAME }} \
            --add-volume-mount volume=config,mount-path=/app/config.yaml \
            --set-secrets /app/config.yaml=${{ env.SERVICE_NAME }}:latest \ "
          echo "Deployment to ${{ env.SERVICE_NAME }} completed."

  