# Configuração do OpenFGA - Docker Compose Local

version: '3.8'

services:
  postgres:
    image: postgres:14
    environment:
      POSTGRES_DB: openfga
      POSTGRES_USER: openfga
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U openfga"]
      interval: 5s
      timeout: 5s
      retries: 5

  openfga:
    build: .
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Configurações do banco de dados
      OPENFGA_DATASTORE_ENGINE: postgres
      OPENFGA_DATASTORE_URI: postgresql://openfga:password@postgres:5432/openfga?sslmode=disable
      
      # Configurações de rede
      OPENFGA_HTTP_ADDR: 0.0.0.0:8080
      OPENFGA_GRPC_ADDR: 0.0.0.0:8081
      
      # Configurações de logging
      OPENFGA_LOG_LEVEL: info
      OPENFGA_LOG_FORMAT: text
      
      # Configurações de autenticação
      OPENFGA_AUTHN_METHOD: none
      
      # Configurações de playground (apenas para desenvolvimento)
      OPENFGA_PLAYGROUND_ENABLED: true
      
      # Configurações de performance
      OPENFGA_DATASTORE_MAX_OPEN_CONNS: 30
      OPENFGA_DATASTORE_MAX_IDLE_CONNS: 10
      OPENFGA_DATASTORE_CONN_MAX_IDLE_TIME: 300s
      OPENFGA_DATASTORE_CONN_MAX_LIFETIME: 3600s
      
      # Configurações de cache (opcional)
      # OPENFGA_CACHE_ENGINE: redis
      # OPENFGA_CACHE_ADDR: redis:6379
      
      # Configurações de métricas
      OPENFGA_METRICS_ENABLED: true
      OPENFGA_METRICS_ADDR: 0.0.0.0:2112
      
      # Configurações de profiling (apenas para desenvolvimento)
      OPENFGA_PROFILER_ENABLED: true
      OPENFGA_PROFILER_ADDR: 0.0.0.0:3001
      
    ports:
      - "8080:8080"  # HTTP API
      - "8081:8081"  # gRPC API
      - "2112:2112"  # Métricas
      - "3001:3001"  # Profiler
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Redis para cache (opcional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Prometheus para métricas (opcional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - openfga

  # Grafana para visualização (opcional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: openfga-network
