model
  schema 1.1

type user

# Planos de serviço
type plan
  relations
    define subscriber: [user]
    define has_cross_tenant_sharing: [user]
    define has_advanced_permissions: [user]
    define has_audit_logs: [user]
    define has_backup: [user]
    define has_external_sharing: [user]

# Grupos para organização de usuários
type group
  relations
    define owner: [user]
    define admin: [user]
    define member: [user]
    define tenant: [tenant]
    
    # Membros ativos do grupo
    define active_member: (member or admin or owner) but not banned from tenant

# Tenant (organização)
type tenant
  relations
    define owner: [user]
    define admin: [user]
    define member: [user]
    define plan: [plan]
    define guest: [user]  # Usuários de outros tenants
    define banned: [user]
    
    # Membros ativos do tenant
    define active_member: (member or admin or owner) but not banned
    
    # Verificação de plano
    define free_plan: subscriber from plan
    define enterprise_plan: subscriber from plan and has_cross_tenant_sharing from plan

# Solicitação de compartilhamento externo (enterprise)
type external_share_request
  relations
    define requester: [user]
    define target_tenant: [tenant]
    define approver1: [user]
    define approver2: [user]
    define vault: [vault]
    define status: [user]  # pending, approved, rejected
    
    # Aprovação dupla para compartilhamento cross-tenant
    define approved: approver1 and approver2
    define can_share_external: approved and enterprise_plan from target_tenant

# Vault (cofre de segredos)
type vault
  relations
    define owner: [user, group#active_member]
    define admin: [user, group#active_member]
    define writer: [user, group#active_member]
    define reader: [user, group#active_member]
    define viewer: [user, group#active_member]
    define copier: [user, group#active_member]
    define downloader: [user, group#active_member]
    define tenant: [tenant]
    define external_guest: [user]  # Usuários de outros tenants (enterprise)
    define api_token: [token]  # Tokens de API para automação
    
    # === PERMISSÕES BÁSICAS ===
    
    # VIEW: Ver metadados (nome, tipo, tags, created_at, updated_at)
    # Não permite ver o conteúdo dos segredos
    define can_view: viewer or reader or writer or admin or owner or active_member from tenant
    
    # READ: Ver conteúdo completo dos segredos
    # Inclui automaticamente VIEW
    define can_read: reader or writer or admin or owner or active_member from tenant or can_read_with_token from api_token
    
    # COPY: Copiar segredos para clipboard/área de transferência
    # Útil para usar em outras aplicações
    define can_copy: copier or reader or writer or admin or owner or can_read_with_token from api_token
    
    # DOWNLOAD: Baixar/exportar segredos em arquivos
    # Mais restritivo que copy por criar arquivos persistentes
    define can_download: downloader or reader or writer or admin or owner or can_read_with_token from api_token
    
    # WRITE: Criar, editar, atualizar segredos
    define can_write: writer or admin or owner or can_write_with_token from api_token
    
    # DELETE: Remover segredos
    define can_delete: admin or owner
    
    # SHARE: Compartilhar vault com outros usuários
    define can_share: admin or owner
    
    # MANAGE: Gerenciar configurações do vault, permissões, etc.
    define can_manage: admin or owner or can_manage_with_token from api_token
    
    # === PERMISSÕES PARA TOKENS DE API ===
    
    # Tokens podem ter permissões específicas limitadas
    define can_read_via_token: can_read and can_read_with_token from api_token
    define can_write_via_token: can_write and can_write_with_token from api_token
    define can_manage_via_token: can_manage and can_manage_with_token from api_token
    
    # === PERMISSÕES PARA CONVIDADOS EXTERNOS (Enterprise only) ===
    
    # Convidados externos só podem ter permissões explícitas
    define can_read_external: external_guest and (reader or viewer or copier or downloader)
    define can_view_external: external_guest and (viewer or reader)
    define can_copy_external: external_guest and (copier or reader)
    define can_download_external: external_guest and (downloader or reader)
    
    # === CONTROLE DE COMPARTILHAMENTO POR PLANO ===
    
    # Plano free: apenas compartilhamento interno
    define can_share_internal: can_share and active_member from tenant
    
    # Plano enterprise: permite compartilhamento externo com aprovação
    define can_share_cross_tenant: can_share and enterprise_plan from tenant and can_share_external from external_share_request

# Segredo genérico
type secret
  relations
    define vault: [vault]
    define owner: [user, group#active_member]
    define sensitive: [user]  # Marca como sensível (requer MFA)
    define production: [user]  # Marca como produção (extra cuidado)
    define temporary: [user]  # Segredo temporário (TTL)
    
    # Herda permissões do vault
    define can_view: can_view from vault or can_view_external from vault
    define can_read: can_read from vault or can_read_external from vault
    define can_copy: can_copy from vault or can_copy_external from vault
    define can_download: can_download from vault or can_download_external from vault
    define can_write: can_write from vault
    define can_delete: can_delete from vault
    
    # Permissões especiais para secrets sensíveis
    define can_read_sensitive: can_read and sensitive and owner
    define can_copy_sensitive: can_copy and sensitive and owner
    define can_copy_production: can_copy and production and (admin from vault or owner)

# Certificado digital
type certificate
  relations
    define vault: [vault]
    define owner: [user, group#active_member]
    define expires_soon: [user]
    define auto_renew: [user]
    define ca_managed: [user]
    
    # Herda do vault
    define can_view: can_view from vault or can_view_external from vault
    define can_read: can_read from vault or can_read_external from vault
    define can_copy: can_copy from vault or can_copy_external from vault
    define can_download: can_download from vault or can_download_external from vault
    define can_write: can_write from vault
    define can_delete: can_delete from vault
    
    # Operações específicas de certificado
    define can_renew: can_write or auto_renew
    define can_revoke: can_delete
    define can_export_p12: can_download and owner
    define can_export_pem: can_download
    define can_install: can_read and owner
    define can_validate: can_read

# Chave SSH
type ssh_key
  relations
    define vault: [vault]
    define owner: [user, group#active_member]
    define production: [user]
    define authorized_hosts: [user]
    define passphrase_protected: [user]
    
    # Herda do vault
    define can_view: can_view from vault or can_view_external from vault
    define can_read: can_read from vault or can_read_external from vault
    define can_copy: can_copy from vault or can_copy_external from vault
    define can_download: can_download from vault or can_download_external from vault
    define can_write: can_write from vault
    define can_delete: can_delete from vault
    
    # Operações específicas de SSH
    define can_use: can_read and authorized_hosts
    define can_deploy_prod: can_use and production and owner
    define can_add_to_agent: can_copy
    define can_generate_public: can_read
    define can_rotate: can_write and owner

# Chave-valor (variáveis de ambiente, configs)
type key_value
  relations
    define vault: [vault]
    define owner: [user, group#active_member]
    define encrypted: [user]
    define environment: [user]  # dev, staging, production
    
    # Herda do vault
    define can_view: can_view from vault or can_view_external from vault
    define can_read: can_read from vault or can_read_external from vault
    define can_copy: can_copy from vault or can_copy_external from vault
    define can_download: can_download from vault or can_download_external from vault
    define can_write: can_write from vault
    define can_delete: can_delete from vault
    
    # Operações específicas de key-value
    define can_export_json: can_download
    define can_export_env: can_download
    define can_export_yaml: can_download
    define can_decrypt: can_read and encrypted and owner
    define can_bulk_edit: can_write and owner

# API Key
type api_key
  relations
    define vault: [vault]
    define owner: [user, group#active_member]
    define service: [user]
    define rate_limited: [user]
    define expires: [user]
    
    # Herda do vault
    define can_view: can_view from vault or can_view_external from vault
    define can_read: can_read from vault or can_read_external from vault
    define can_copy: can_copy from vault or can_copy_external from vault
    define can_download: can_download from vault or can_download_external from vault
    define can_write: can_write from vault
    define can_delete: can_delete from vault
    
    # Operações específicas de API key
    define can_rotate: can_write and owner
    define can_revoke: can_delete
    define can_test: can_read

# Database connection
type database_connection
  relations
    define vault: [vault]
    define owner: [user, group#active_member]
    define database_type: [user]  # mysql, postgres, mongo, etc.
    define production: [user]
    define read_only: [user]
    
    # Herda do vault
    define can_view: can_view from vault or can_view_external from vault
    define can_read: can_read from vault or can_read_external from vault
    define can_copy: can_copy from vault or can_copy_external from vault
    define can_download: can_download from vault or can_download_external from vault
    define can_write: can_write from vault
    define can_delete: can_delete from vault
    
    # Operações específicas de database
    define can_test_connection: can_read
    define can_connect_prod: can_read and production and owner
    define can_export_schema: can_download and owner

# Log de auditoria
type audit_log
  relations
    define vault: [vault]
    define tenant: [tenant]
    define system: [user]
    define auditor: [user]
    define compliance_officer: [user]
    
    # Acesso a logs de auditoria
    define can_read: auditor or can_manage from vault or system or compliance_officer
    define can_export: auditor and (can_manage from vault) or compliance_officer
    define can_search: auditor or can_manage from vault or compliance_officer
    define can_retention_policy: can_manage from vault and compliance_officer

# Backup
type backup
  relations
    define vault: [vault]
    define tenant: [tenant]
    define system: [user]
    
    # Operações de backup
    define can_create: can_manage from vault or system
    define can_restore: can_manage from vault or system
    define can_download_backup: can_manage from vault or system
    define can_schedule: can_manage from vault
    define can_encrypt: can_manage from vault
    define can_verify: can_manage from vault

# Notificação
type notification
  relations
    define user: [user]
    define vault: [vault]
    define tenant: [tenant]
    define system: [user]
    define type: [user]  # security, expiration, sharing, etc.
    
    # Operações de notificação
    define can_read: user
    define can_dismiss: user
    define can_configure: user
    define can_send: system
    define can_bulk_manage: admin from tenant or owner from tenant

# Sessão de usuário
type session
  relations
    define user: [user]
    define device: [user]
    define location: [user]
    define mfa_verified: [user]
    define suspicious: [user]
    
    # Operações de sessão
    define can_use: user and mfa_verified and not suspicious
    define can_terminate: user or admin from tenant
    define can_audit: admin from tenant or system

# Token de acesso para automação
type token
  relations
    define owner: [user, group#active_member]
    define vault: [vault]
    define tenant: [tenant]
    define service: [user]  # Serviço/aplicação que usa o token
    define expires: [user]  # Token com expiração
    define read_only: [user]  # Token somente leitura
    define scope_limited: [user]  # Token com escopo limitado
    define production: [user]  # Token para ambiente de produção
    define revoked: [user]  # Token revogado
    define rate_limited: [user]  # Token com rate limiting
    
    # Permissões específicas do token
    define can_read_secrets: [user]
    define can_write_secrets: [user]
    define can_manage_vault: [user]
    define can_audit: [user]
    define can_backup: [user]
    
    # Verificações de validade
    define is_valid: not revoked and not expires
    define is_active: is_valid and owner
    
    # Operações básicas com tokens
    define can_use: is_active and (can_read_secrets or can_write_secrets or can_manage_vault)
    define can_read_with_token: is_active and can_read_secrets and can_read from vault
    define can_write_with_token: is_active and can_write_secrets and can_write from vault
    define can_manage_with_token: is_active and can_manage_vault and can_manage from vault
    define can_audit_with_token: is_active and can_audit and can_read from audit_log
    define can_backup_with_token: is_active and can_backup and can_create from backup
    
    # Operações administrativas do token
    define can_revoke: owner or admin from tenant
    define can_regenerate: owner
    define can_extend_expiry: owner
    define can_view_usage: owner or admin from tenant
    define can_configure_rate_limit: owner or admin from tenant
    
    # Restrições por ambiente
    define can_use_in_production: can_use and production and owner
    define can_use_readonly: can_use and read_only and can_read_secrets
    define can_use_limited_scope: can_use and scope_limited and (can_read_secrets or can_write_secrets)
